
bin/rfid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b2  00800100  000007ec  00000860  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000011  00000000  00000000  00000912  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000924  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000960  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a9a  00000000  00000000  000009e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b54  00000000  00000000  00002482  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000095c  00000000  00000000  00002fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000288  00000000  00000000  00003934  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000054c  00000000  00000000  00003bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000133a  00000000  00000000  00004108  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00005442  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	2b c0       	rjmp	.+86     	; 0x5a <__bad_interrupt>
   4:	2a c0       	rjmp	.+84     	; 0x5a <__bad_interrupt>
   6:	29 c0       	rjmp	.+82     	; 0x5a <__bad_interrupt>
   8:	28 c0       	rjmp	.+80     	; 0x5a <__bad_interrupt>
   a:	27 c0       	rjmp	.+78     	; 0x5a <__bad_interrupt>
   c:	26 c0       	rjmp	.+76     	; 0x5a <__bad_interrupt>
   e:	25 c0       	rjmp	.+74     	; 0x5a <__bad_interrupt>
  10:	24 c0       	rjmp	.+72     	; 0x5a <__bad_interrupt>
  12:	23 c0       	rjmp	.+70     	; 0x5a <__bad_interrupt>
  14:	22 c0       	rjmp	.+68     	; 0x5a <__bad_interrupt>
  16:	21 c0       	rjmp	.+66     	; 0x5a <__bad_interrupt>
  18:	20 c0       	rjmp	.+64     	; 0x5a <__bad_interrupt>
  1a:	1f c0       	rjmp	.+62     	; 0x5a <__bad_interrupt>
  1c:	1e c0       	rjmp	.+60     	; 0x5a <__bad_interrupt>
  1e:	1d c0       	rjmp	.+58     	; 0x5a <__bad_interrupt>
  20:	1c c0       	rjmp	.+56     	; 0x5a <__bad_interrupt>
  22:	1b c0       	rjmp	.+54     	; 0x5a <__bad_interrupt>
  24:	1a c0       	rjmp	.+52     	; 0x5a <__bad_interrupt>
  26:	19 c0       	rjmp	.+50     	; 0x5a <__bad_interrupt>
  28:	18 c0       	rjmp	.+48     	; 0x5a <__bad_interrupt>
  2a:	17 c0       	rjmp	.+46     	; 0x5a <__bad_interrupt>
  2c:	16 c0       	rjmp	.+44     	; 0x5a <__bad_interrupt>
  2e:	15 c0       	rjmp	.+42     	; 0x5a <__bad_interrupt>
  30:	14 c0       	rjmp	.+40     	; 0x5a <__bad_interrupt>
  32:	13 c0       	rjmp	.+38     	; 0x5a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ec ee       	ldi	r30, 0xEC	; 236
  48:	f7 e0       	ldi	r31, 0x07	; 7
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a2 3b       	cpi	r26, 0xB2	; 178
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>
  56:	d9 d2       	rcall	.+1458   	; 0x60a <main>
  58:	c7 c3       	rjmp	.+1934   	; 0x7e8 <_exit>

0000005a <__bad_interrupt>:
  5a:	d2 cf       	rjmp	.-92     	; 0x0 <__vectors>

0000005c <gate_action>:
	}
}

void gate_action()
{
	LCDWriteStringXY(0,1,"Opening Gate ...");
  5c:	61 e0       	ldi	r22, 0x01	; 1
  5e:	80 e0       	ldi	r24, 0x00	; 0
  60:	19 d1       	rcall	.+562    	; 0x294 <LCDGotoXY>
  62:	8a e0       	ldi	r24, 0x0A	; 10
  64:	91 e0       	ldi	r25, 0x01	; 1
  66:	a9 d0       	rcall	.+338    	; 0x1ba <LCDWriteString>
	MOTOR_ROTATE_CW();
  68:	80 e1       	ldi	r24, 0x10	; 16
  6a:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  6c:	2f ef       	ldi	r18, 0xFF	; 255
  6e:	81 e1       	ldi	r24, 0x11	; 17
  70:	9a e7       	ldi	r25, 0x7A	; 122
  72:	21 50       	subi	r18, 0x01	; 1
  74:	80 40       	sbci	r24, 0x00	; 0
  76:	90 40       	sbci	r25, 0x00	; 0
  78:	e1 f7       	brne	.-8      	; 0x72 <gate_action+0x16>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <gate_action+0x20>
  7c:	00 00       	nop
	_delay_ms(5000);
	MOTOR_OFF();
  7e:	18 b8       	out	0x08, r1	; 8
  80:	2f ef       	ldi	r18, 0xFF	; 255
  82:	87 ea       	ldi	r24, 0xA7	; 167
  84:	91 e6       	ldi	r25, 0x61	; 97
  86:	21 50       	subi	r18, 0x01	; 1
  88:	80 40       	sbci	r24, 0x00	; 0
  8a:	90 40       	sbci	r25, 0x00	; 0
  8c:	e1 f7       	brne	.-8      	; 0x86 <gate_action+0x2a>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <gate_action+0x34>
  90:	00 00       	nop
	_delay_ms(4000);
	LCDWriteStringXY(0,1,"Closing Gate ...");
  92:	61 e0       	ldi	r22, 0x01	; 1
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	fe d0       	rcall	.+508    	; 0x294 <LCDGotoXY>
  98:	8b e1       	ldi	r24, 0x1B	; 27
  9a:	91 e0       	ldi	r25, 0x01	; 1
  9c:	8e d0       	rcall	.+284    	; 0x1ba <LCDWriteString>
	MOTOR_ROTATE_CCW();
  9e:	80 e2       	ldi	r24, 0x20	; 32
  a0:	88 b9       	out	0x08, r24	; 8
  a2:	2f ef       	ldi	r18, 0xFF	; 255
  a4:	81 e1       	ldi	r24, 0x11	; 17
  a6:	9a e7       	ldi	r25, 0x7A	; 122
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	80 40       	sbci	r24, 0x00	; 0
  ac:	90 40       	sbci	r25, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <gate_action+0x4c>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <gate_action+0x56>
  b2:	00 00       	nop
	_delay_ms(5000);
	MOTOR_OFF();	
  b4:	18 b8       	out	0x08, r1	; 8
  b6:	08 95       	ret

000000b8 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
  b8:	8a b1       	in	r24, 0x0a	; 10
  ba:	80 7f       	andi	r24, 0xF0	; 240
  bc:	8a b9       	out	0x0a, r24	; 10

	//change LCD mode
	SET_RW();		//Read mode
  be:	5e 9a       	sbi	0x0b, 6	; 11
	CLEAR_RS();		//Read status
  c0:	5d 98       	cbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <LCDBusyLoop+0xc>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <LCDBusyLoop+0xe>

	
	do
	{

		SET_E();
  c6:	5c 9a       	sbi	0x0b, 4	; 11
  c8:	00 c0       	rjmp	.+0      	; 0xca <LCDBusyLoop+0x12>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <LCDBusyLoop+0x14>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
  cc:	89 b1       	in	r24, 0x09	; 9
		status=status<<4;
  ce:	82 95       	swap	r24
  d0:	80 7f       	andi	r24, 0xF0	; 240
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <LCDBusyLoop+0x1c>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <LCDBusyLoop+0x1e>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
  d6:	5c 98       	cbi	0x0b, 4	; 11
  d8:	92 e0       	ldi	r25, 0x02	; 2
  da:	9a 95       	dec	r25
  dc:	f1 f7       	brne	.-4      	; 0xda <LCDBusyLoop+0x22>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <LCDBusyLoop+0x28>
		_delay_us(1);	//tEL

		SET_E();
  e0:	5c 9a       	sbi	0x0b, 4	; 11
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <LCDBusyLoop+0x2c>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <LCDBusyLoop+0x2e>
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
  e6:	99 b1       	in	r25, 0x09	; 9
  e8:	00 c0       	rjmp	.+0      	; 0xea <LCDBusyLoop+0x32>
  ea:	00 c0       	rjmp	.+0      	; 0xec <LCDBusyLoop+0x34>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
  ec:	5c 98       	cbi	0x0b, 4	; 11
  ee:	92 e0       	ldi	r25, 0x02	; 2
  f0:	9a 95       	dec	r25
  f2:	f1 f7       	brne	.-4      	; 0xf0 <LCDBusyLoop+0x38>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <LCDBusyLoop+0x3e>
		_delay_us(1);	//tEL
	}while(busy);
  f6:	87 fd       	sbrc	r24, 7
  f8:	e6 cf       	rjmp	.-52     	; 0xc6 <LCDBusyLoop+0xe>

	CLEAR_RW();		//write mode
  fa:	5e 98       	cbi	0x0b, 6	; 11
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
  fc:	8a b1       	in	r24, 0x0a	; 10
  fe:	8f 60       	ori	r24, 0x0F	; 15
 100:	8a b9       	out	0x0a, r24	; 10
 102:	08 95       	ret

00000104 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
 104:	28 2f       	mov	r18, r24
 106:	22 95       	swap	r18
 108:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
 10a:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
 10c:	61 11       	cpse	r22, r1
 10e:	02 c0       	rjmp	.+4      	; 0x114 <LCDByte+0x10>
	CLEAR_RS();
 110:	5d 98       	cbi	0x0b, 5	; 11
 112:	01 c0       	rjmp	.+2      	; 0x116 <LCDByte+0x12>
else
	SET_RS();
 114:	5d 9a       	sbi	0x0b, 5	; 11
 116:	00 c0       	rjmp	.+0      	; 0x118 <LCDByte+0x14>
 118:	00 c0       	rjmp	.+0      	; 0x11a <LCDByte+0x16>

_delay_us(0.500);		//tAS

SET_E();
 11a:	5c 9a       	sbi	0x0b, 4	; 11

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
 11c:	9b b1       	in	r25, 0x0b	; 11
 11e:	90 7f       	andi	r25, 0xF0	; 240
 120:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
 122:	9b b9       	out	0x0b, r25	; 11
 124:	92 e0       	ldi	r25, 0x02	; 2
 126:	9a 95       	dec	r25
 128:	f1 f7       	brne	.-4      	; 0x126 <LCDByte+0x22>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <LCDByte+0x28>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 12c:	5c 98       	cbi	0x0b, 4	; 11
 12e:	92 e0       	ldi	r25, 0x02	; 2
 130:	9a 95       	dec	r25
 132:	f1 f7       	brne	.-4      	; 0x130 <LCDByte+0x2c>
 134:	00 c0       	rjmp	.+0      	; 0x136 <LCDByte+0x32>

_delay_us(1);

//Send the lower nibble
SET_E();
 136:	5c 9a       	sbi	0x0b, 4	; 11

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
 138:	9b b1       	in	r25, 0x0b	; 11
 13a:	90 7f       	andi	r25, 0xF0	; 240
 13c:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
 13e:	8b b9       	out	0x0b, r24	; 11
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	8a 95       	dec	r24
 144:	f1 f7       	brne	.-4      	; 0x142 <LCDByte+0x3e>
 146:	00 c0       	rjmp	.+0      	; 0x148 <LCDByte+0x44>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 148:	5c 98       	cbi	0x0b, 4	; 11
 14a:	92 e0       	ldi	r25, 0x02	; 2
 14c:	9a 95       	dec	r25
 14e:	f1 f7       	brne	.-4      	; 0x14c <LCDByte+0x48>
 150:	00 c0       	rjmp	.+0      	; 0x152 <LCDByte+0x4e>

_delay_us(1);			//tEL

LCDBusyLoop();
 152:	b2 cf       	rjmp	.-156    	; 0xb8 <LCDBusyLoop>

00000154 <LCDInit>:
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
{
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	1f 92       	push	r1
 15a:	cd b7       	in	r28, 0x3d	; 61
 15c:	de b7       	in	r29, 0x3e	; 62
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15e:	ef e5       	ldi	r30, 0x5F	; 95
 160:	fa ee       	ldi	r31, 0xEA	; 234
 162:	31 97       	sbiw	r30, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <LCDInit+0xe>
 166:	00 c0       	rjmp	.+0      	; 0x168 <LCDInit+0x14>
 168:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 16a:	9a b1       	in	r25, 0x0a	; 10
 16c:	9f 60       	ori	r25, 0x0F	; 15
 16e:	9a b9       	out	0x0a, r25	; 10
	LCD_E_DDR|=(1<<LCD_E_POS);
 170:	54 9a       	sbi	0x0a, 4	; 10
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 172:	55 9a       	sbi	0x0a, 5	; 10
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 174:	56 9a       	sbi	0x0a, 6	; 10

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
 176:	9b b1       	in	r25, 0x0b	; 11
 178:	90 7f       	andi	r25, 0xF0	; 240
 17a:	9b b9       	out	0x0b, r25	; 11
	CLEAR_E();
 17c:	5c 98       	cbi	0x0b, 4	; 11
	CLEAR_RW();
 17e:	5e 98       	cbi	0x0b, 6	; 11
	CLEAR_RS();
 180:	5d 98       	cbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 182:	00 c0       	rjmp	.+0      	; 0x184 <LCDInit+0x30>
 184:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 186:	5c 9a       	sbi	0x0b, 4	; 11
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 188:	59 9a       	sbi	0x0b, 1	; 11
 18a:	f2 e0       	ldi	r31, 0x02	; 2
 18c:	fa 95       	dec	r31
 18e:	f1 f7       	brne	.-4      	; 0x18c <LCDInit+0x38>
 190:	00 c0       	rjmp	.+0      	; 0x192 <LCDInit+0x3e>
	_delay_us(1);
	CLEAR_E();
 192:	5c 98       	cbi	0x0b, 4	; 11
 194:	92 e0       	ldi	r25, 0x02	; 2
 196:	9a 95       	dec	r25
 198:	f1 f7       	brne	.-4      	; 0x196 <LCDInit+0x42>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <LCDInit+0x48>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 19c:	89 83       	std	Y+1, r24	; 0x01
 19e:	8c df       	rcall	.-232    	; 0xb8 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 1a0:	60 e0       	ldi	r22, 0x00	; 0
 1a2:	89 81       	ldd	r24, Y+1	; 0x01
 1a4:	8c 60       	ori	r24, 0x0C	; 12
 1a6:	ae df       	rcall	.-164    	; 0x104 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	88 e2       	ldi	r24, 0x28	; 40
 1ac:	ab df       	rcall	.-170    	; 0x104 <LCDByte>
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 1ae:	60 e0       	ldi	r22, 0x00	; 0
 1b0:	80 e8       	ldi	r24, 0x80	; 128
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format

	
	LCDGotoXY(0,0);

}
 1b2:	0f 90       	pop	r0
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 1b8:	a5 cf       	rjmp	.-182    	; 0x104 <LCDByte>

000001ba <LCDWriteString>:
	
	LCDGotoXY(0,0);

}
void LCDWriteString(const char *msg)
{
 1ba:	0f 93       	push	r16
 1bc:	1f 93       	push	r17
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
 1c2:	ec 01       	movw	r28, r24
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
 1c4:	88 81       	ld	r24, Y
 1c6:	88 23       	and	r24, r24
 1c8:	b1 f0       	breq	.+44     	; 0x1f6 <LCDWriteString+0x3c>
 {
 	//Custom Char Support
	if(*msg=='%')
 1ca:	85 32       	cpi	r24, 0x25	; 37
 1cc:	71 f4       	brne	.+28     	; 0x1ea <LCDWriteString+0x30>
	{
		msg++;
 1ce:	8e 01       	movw	r16, r28
 1d0:	0f 5f       	subi	r16, 0xFF	; 255
 1d2:	1f 4f       	sbci	r17, 0xFF	; 255
		int8_t cc=*msg-'0';
 1d4:	89 81       	ldd	r24, Y+1	; 0x01
 1d6:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
		{
			LCDData(cc);
 1d8:	61 e0       	ldi	r22, 0x01	; 1
	if(*msg=='%')
	{
		msg++;
		int8_t cc=*msg-'0';

		if(cc>=0 && cc<=7)
 1da:	88 30       	cpi	r24, 0x08	; 8
 1dc:	20 f0       	brcs	.+8      	; 0x1e6 <LCDWriteString+0x2c>
		{
			LCDData(cc);
		}
		else
		{
			LCDData('%');
 1de:	85 e2       	ldi	r24, 0x25	; 37
 1e0:	91 df       	rcall	.-222    	; 0x104 <LCDByte>
			LCDData(*msg);
 1e2:	61 e0       	ldi	r22, 0x01	; 1
 1e4:	89 81       	ldd	r24, Y+1	; 0x01
 1e6:	8e df       	rcall	.-228    	; 0x104 <LCDByte>
 1e8:	03 c0       	rjmp	.+6      	; 0x1f0 <LCDWriteString+0x36>
		}
	}
	else
	{
		LCDData(*msg);
 1ea:	61 e0       	ldi	r22, 0x01	; 1
 1ec:	8b df       	rcall	.-234    	; 0x104 <LCDByte>
 1ee:	8e 01       	movw	r16, r28
	}
	msg++;
 1f0:	e8 01       	movw	r28, r16
 1f2:	21 96       	adiw	r28, 0x01	; 1
 1f4:	e7 cf       	rjmp	.-50     	; 0x1c4 <LCDWriteString+0xa>
 }
}
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	1f 91       	pop	r17
 1fc:	0f 91       	pop	r16
 1fe:	08 95       	ret

00000200 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 200:	ef 92       	push	r14
 202:	ff 92       	push	r15
 204:	0f 93       	push	r16
 206:	1f 93       	push	r17
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 20c:	00 d0       	rcall	.+0      	; 0x20e <LCDWriteInt+0xe>
 20e:	00 d0       	rcall	.+0      	; 0x210 <LCDWriteInt+0x10>
 210:	1f 92       	push	r1
 212:	cd b7       	in	r28, 0x3d	; 61
 214:	de b7       	in	r29, 0x3e	; 62
 216:	9b 01       	movw	r18, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 218:	ae 01       	movw	r20, r28
 21a:	4f 5f       	subi	r20, 0xFF	; 255
 21c:	5f 4f       	sbci	r21, 0xFF	; 255
 21e:	7a 01       	movw	r14, r20
 220:	45 e0       	ldi	r20, 0x05	; 5
 222:	f7 01       	movw	r30, r14
 224:	11 92       	st	Z+, r1
 226:	4a 95       	dec	r20
 228:	e9 f7       	brne	.-6      	; 0x224 <LCDWriteInt+0x24>
 22a:	fe 01       	movw	r30, r28
 22c:	36 96       	adiw	r30, 0x06	; 6
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 22e:	0a e0       	ldi	r16, 0x0A	; 10
 230:	10 e0       	ldi	r17, 0x00	; 0

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 232:	00 97       	sbiw	r24, 0x00	; 0
 234:	29 f0       	breq	.+10     	; 0x240 <LCDWriteInt+0x40>
	{
	str[i]=val%10;
 236:	b8 01       	movw	r22, r16
 238:	b0 d2       	rcall	.+1376   	; 0x79a <__divmodhi4>
 23a:	82 93       	st	-Z, r24
	val=val/10;
 23c:	cb 01       	movw	r24, r22
 23e:	f9 cf       	rjmp	.-14     	; 0x232 <LCDWriteInt+0x32>
	i--;
	}
	if(field_length==-1)
 240:	2f 3f       	cpi	r18, 0xFF	; 255
 242:	ff ef       	ldi	r31, 0xFF	; 255
 244:	3f 07       	cpc	r19, r31
 246:	41 f4       	brne	.+16     	; 0x258 <LCDWriteInt+0x58>
 248:	f7 01       	movw	r30, r14
 24a:	8f 01       	movw	r16, r30
 24c:	0e 19       	sub	r16, r14
 24e:	1f 09       	sbc	r17, r15
		while(str[j]==0) j++;
 250:	81 91       	ld	r24, Z+
 252:	88 23       	and	r24, r24
 254:	d1 f3       	breq	.-12     	; 0x24a <LCDWriteInt+0x4a>
 256:	04 c0       	rjmp	.+8      	; 0x260 <LCDWriteInt+0x60>
	else
		j=5-field_length;
 258:	05 e0       	ldi	r16, 0x05	; 5
 25a:	10 e0       	ldi	r17, 0x00	; 0
 25c:	02 1b       	sub	r16, r18
 25e:	13 0b       	sbc	r17, r19
 260:	0e 0d       	add	r16, r14
 262:	1f 1d       	adc	r17, r15

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 264:	c8 01       	movw	r24, r16
 266:	8e 19       	sub	r24, r14
 268:	9f 09       	sbc	r25, r15
 26a:	05 97       	sbiw	r24, 0x05	; 5
 26c:	3c f4       	brge	.+14     	; 0x27c <LCDWriteInt+0x7c>
	{
	LCDData(48+str[i]);
 26e:	f8 01       	movw	r30, r16
 270:	81 91       	ld	r24, Z+
 272:	8f 01       	movw	r16, r30
 274:	61 e0       	ldi	r22, 0x01	; 1
 276:	80 5d       	subi	r24, 0xD0	; 208
 278:	45 df       	rcall	.-374    	; 0x104 <LCDByte>
 27a:	f4 cf       	rjmp	.-24     	; 0x264 <LCDWriteInt+0x64>
	}
}
 27c:	0f 90       	pop	r0
 27e:	0f 90       	pop	r0
 280:	0f 90       	pop	r0
 282:	0f 90       	pop	r0
 284:	0f 90       	pop	r0
 286:	df 91       	pop	r29
 288:	cf 91       	pop	r28
 28a:	1f 91       	pop	r17
 28c:	0f 91       	pop	r16
 28e:	ff 90       	pop	r15
 290:	ef 90       	pop	r14
 292:	08 95       	ret

00000294 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
 294:	84 31       	cpi	r24, 0x14	; 20
 296:	70 f4       	brcc	.+28     	; 0x2b4 <LCDGotoXY+0x20>

	#ifdef LCD_TYPE_204
	
	switch(y)
 298:	62 30       	cpi	r22, 0x02	; 2
 29a:	31 f0       	breq	.+12     	; 0x2a8 <LCDGotoXY+0x14>
 29c:	63 30       	cpi	r22, 0x03	; 3
 29e:	31 f0       	breq	.+12     	; 0x2ac <LCDGotoXY+0x18>
 2a0:	61 30       	cpi	r22, 0x01	; 1
 2a2:	29 f4       	brne	.+10     	; 0x2ae <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
 2a4:	80 64       	ori	r24, 0x40	; 64
 2a6:	03 c0       	rjmp	.+6      	; 0x2ae <LCDGotoXY+0x1a>
			break;
		case 2:
			x+=0x14;
 2a8:	8c 5e       	subi	r24, 0xEC	; 236
 2aa:	01 c0       	rjmp	.+2      	; 0x2ae <LCDGotoXY+0x1a>
			break;
		case 3:
			x+=0x54;
 2ac:	8c 5a       	subi	r24, 0xAC	; 172
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 2ae:	60 e0       	ldi	r22, 0x00	; 0
 2b0:	80 68       	ori	r24, 0x80	; 128
 2b2:	28 cf       	rjmp	.-432    	; 0x104 <LCDByte>
 2b4:	08 95       	ret

000002b6 <LCDHexDumpXY>:
}



void LCDHexDumpXY(uint8_t x, uint8_t y,uint8_t d)
{
 2b6:	cf 93       	push	r28
 2b8:	c4 2f       	mov	r28, r20
	LCDGotoXY(x,y);
 2ba:	ec df       	rcall	.-40     	; 0x294 <LCDGotoXY>
	uint8_t byte = '0';
	(((d>>4)&0x0F)<=9) ? (byte='0'+((d>>4)&0x0F)) : (byte='A'+ ((d>>4)&0x0F)-0x0A);
 2bc:	8c 2f       	mov	r24, r28
 2be:	82 95       	swap	r24
 2c0:	8f 70       	andi	r24, 0x0F	; 15
 2c2:	8a 30       	cpi	r24, 0x0A	; 10
 2c4:	10 f4       	brcc	.+4      	; 0x2ca <LCDHexDumpXY+0x14>
 2c6:	80 5d       	subi	r24, 0xD0	; 208
 2c8:	01 c0       	rjmp	.+2      	; 0x2cc <LCDHexDumpXY+0x16>
 2ca:	89 5c       	subi	r24, 0xC9	; 201
	LCDByte(byte,1);
 2cc:	61 e0       	ldi	r22, 0x01	; 1
 2ce:	1a df       	rcall	.-460    	; 0x104 <LCDByte>
	LCDBusyLoop();
 2d0:	f3 de       	rcall	.-538    	; 0xb8 <LCDBusyLoop>
 2d2:	8c 2f       	mov	r24, r28
 2d4:	8f 70       	andi	r24, 0x0F	; 15
	
	((d&0x0F)<=9) ? (byte='0'+ (d&0x0F)) : (byte='A'+ (d&0x0F)-0x0A);
 2d6:	8a 30       	cpi	r24, 0x0A	; 10
 2d8:	10 f4       	brcc	.+4      	; 0x2de <LCDHexDumpXY+0x28>
 2da:	80 5d       	subi	r24, 0xD0	; 208
 2dc:	01 c0       	rjmp	.+2      	; 0x2e0 <LCDHexDumpXY+0x2a>
 2de:	89 5c       	subi	r24, 0xC9	; 201
	LCDByte(byte,1);
 2e0:	61 e0       	ldi	r22, 0x01	; 1
 2e2:	10 df       	rcall	.-480    	; 0x104 <LCDByte>
	LCDBusyLoop();
}
 2e4:	cf 91       	pop	r28
	LCDByte(byte,1);
	LCDBusyLoop();
	
	((d&0x0F)<=9) ? (byte='0'+ (d&0x0F)) : (byte='A'+ (d&0x0F)-0x0A);
	LCDByte(byte,1);
	LCDBusyLoop();
 2e6:	e8 ce       	rjmp	.-560    	; 0xb8 <LCDBusyLoop>

000002e8 <mfrc522_write>:
		mfrc522_write(TxControlReg,byte|0x03);
	}
}

void mfrc522_write(uint8_t reg, uint8_t data)
{
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	1f 92       	push	r1
 2ee:	cd b7       	in	r28, 0x3d	; 61
 2f0:	de b7       	in	r29, 0x3e	; 62
	ENABLE_CHIP();
 2f2:	2a 98       	cbi	0x05, 2	; 5
	spi_transmit((reg<<1)&0x7E);
 2f4:	88 0f       	add	r24, r24
 2f6:	8e 77       	andi	r24, 0x7E	; 126
 2f8:	69 83       	std	Y+1, r22	; 0x01
 2fa:	81 d1       	rcall	.+770    	; 0x5fe <spi_transmit>
	spi_transmit(data);
 2fc:	69 81       	ldd	r22, Y+1	; 0x01
 2fe:	86 2f       	mov	r24, r22
 300:	7e d1       	rcall	.+764    	; 0x5fe <spi_transmit>
	DISABLE_CHIP();
 302:	2a 9a       	sbi	0x05, 2	; 5
}
 304:	0f 90       	pop	r0
 306:	df 91       	pop	r29
 308:	cf 91       	pop	r28
 30a:	08 95       	ret

0000030c <mfrc522_read>:

uint8_t mfrc522_read(uint8_t reg)
{
	uint8_t data;	
	ENABLE_CHIP();
 30c:	2a 98       	cbi	0x05, 2	; 5
	spi_transmit(((reg<<1)&0x7E)|0x80);
 30e:	88 0f       	add	r24, r24
 310:	8e 77       	andi	r24, 0x7E	; 126
 312:	80 68       	ori	r24, 0x80	; 128
 314:	74 d1       	rcall	.+744    	; 0x5fe <spi_transmit>
	data = spi_transmit(0x00);
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	72 d1       	rcall	.+740    	; 0x5fe <spi_transmit>
	DISABLE_CHIP();
 31a:	2a 9a       	sbi	0x05, 2	; 5
	return data;
}
 31c:	08 95       	ret

0000031e <mfrc522_reset>:

void mfrc522_reset()
{
	mfrc522_write(CommandReg,SoftReset_CMD);
 31e:	6f e0       	ldi	r22, 0x0F	; 15
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	e2 cf       	rjmp	.-60     	; 0x2e8 <mfrc522_write>

00000324 <mfrc522_init>:
#endif

void mfrc522_init()
{
	uint8_t byte;
	mfrc522_reset();
 324:	fc df       	rcall	.-8      	; 0x31e <mfrc522_reset>
	
	mfrc522_write(TModeReg, 0x8D);
 326:	6d e8       	ldi	r22, 0x8D	; 141
 328:	8a e2       	ldi	r24, 0x2A	; 42
 32a:	de df       	rcall	.-68     	; 0x2e8 <mfrc522_write>
    mfrc522_write(TPrescalerReg, 0x3E);
 32c:	6e e3       	ldi	r22, 0x3E	; 62
 32e:	8b e2       	ldi	r24, 0x2B	; 43
 330:	db df       	rcall	.-74     	; 0x2e8 <mfrc522_write>
    mfrc522_write(TReloadReg_1, 30);   
 332:	6e e1       	ldi	r22, 0x1E	; 30
 334:	8c e2       	ldi	r24, 0x2C	; 44
 336:	d8 df       	rcall	.-80     	; 0x2e8 <mfrc522_write>
    mfrc522_write(TReloadReg_2, 0);	
 338:	60 e0       	ldi	r22, 0x00	; 0
 33a:	8d e2       	ldi	r24, 0x2D	; 45
 33c:	d5 df       	rcall	.-86     	; 0x2e8 <mfrc522_write>
	mfrc522_write(TxASKReg, 0x40);	
 33e:	60 e4       	ldi	r22, 0x40	; 64
 340:	85 e1       	ldi	r24, 0x15	; 21
 342:	d2 df       	rcall	.-92     	; 0x2e8 <mfrc522_write>
	mfrc522_write(ModeReg, 0x3D);
 344:	6d e3       	ldi	r22, 0x3D	; 61
 346:	81 e1       	ldi	r24, 0x11	; 17
 348:	cf df       	rcall	.-98     	; 0x2e8 <mfrc522_write>
	
	byte = mfrc522_read(TxControlReg);
 34a:	84 e1       	ldi	r24, 0x14	; 20
 34c:	df df       	rcall	.-66     	; 0x30c <mfrc522_read>
	if(!(byte&0x03))
 34e:	98 2f       	mov	r25, r24
 350:	93 70       	andi	r25, 0x03	; 3
 352:	21 f4       	brne	.+8      	; 0x35c <mfrc522_init+0x38>
	{
		mfrc522_write(TxControlReg,byte|0x03);
 354:	68 2f       	mov	r22, r24
 356:	63 60       	ori	r22, 0x03	; 3
 358:	84 e1       	ldi	r24, 0x14	; 20
 35a:	c6 cf       	rjmp	.-116    	; 0x2e8 <mfrc522_write>
 35c:	08 95       	ret

0000035e <mfrc522_to_card>:
   
	return status;
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
 35e:	2f 92       	push	r2
 360:	3f 92       	push	r3
 362:	4f 92       	push	r4
 364:	5f 92       	push	r5
 366:	6f 92       	push	r6
 368:	7f 92       	push	r7
 36a:	8f 92       	push	r8
 36c:	9f 92       	push	r9
 36e:	af 92       	push	r10
 370:	bf 92       	push	r11
 372:	cf 92       	push	r12
 374:	df 92       	push	r13
 376:	ef 92       	push	r14
 378:	ff 92       	push	r15
 37a:	0f 93       	push	r16
 37c:	1f 93       	push	r17
 37e:	cf 93       	push	r28
 380:	df 93       	push	r29
 382:	00 d0       	rcall	.+0      	; 0x384 <mfrc522_to_card+0x26>
 384:	1f 92       	push	r1
 386:	cd b7       	in	r28, 0x3d	; 61
 388:	de b7       	in	r29, 0x3e	; 62
 38a:	d8 2e       	mov	r13, r24
 38c:	c6 2e       	mov	r12, r22
 38e:	44 2e       	mov	r4, r20
 390:	79 01       	movw	r14, r18
 392:	1b 83       	std	Y+3, r17	; 0x03
 394:	0a 83       	std	Y+2, r16	; 0x02
    uint8_t lastBits;
    uint8_t n;
    uint8_t	tmp;
    uint32_t i;

    switch (cmd)
 396:	8c e0       	ldi	r24, 0x0C	; 12
 398:	d8 16       	cp	r13, r24
 39a:	31 f0       	breq	.+12     	; 0x3a8 <mfrc522_to_card+0x4a>
 39c:	ee e0       	ldi	r30, 0x0E	; 14
 39e:	de 16       	cp	r13, r30
 3a0:	31 f0       	breq	.+12     	; 0x3ae <mfrc522_to_card+0x50>

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
    uint8_t irqEn = 0x00;
    uint8_t waitIRq = 0x00;
 3a2:	00 e0       	ldi	r16, 0x00	; 0
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
    uint8_t irqEn = 0x00;
 3a4:	10 e0       	ldi	r17, 0x00	; 0
 3a6:	05 c0       	rjmp	.+10     	; 0x3b2 <mfrc522_to_card+0x54>
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
			waitIRq = 0x30;
 3a8:	00 e3       	ldi	r16, 0x30	; 48
			waitIRq = 0x10;
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
 3aa:	17 e7       	ldi	r17, 0x77	; 119
			waitIRq = 0x30;
			break;
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <mfrc522_to_card+0x54>
    switch (cmd)
    {
        case MFAuthent_CMD:		//Certification cards close
		{
			irqEn = 0x12;
			waitIRq = 0x10;
 3ae:	00 e1       	ldi	r16, 0x10	; 16

    switch (cmd)
    {
        case MFAuthent_CMD:		//Certification cards close
		{
			irqEn = 0x12;
 3b0:	12 e1       	ldi	r17, 0x12	; 18
		default:
			break;
    }
   
    //mfrc522_write(ComIEnReg, irqEn|0x80);	//Interrupt request
    n=mfrc522_read(ComIrqReg);
 3b2:	84 e0       	ldi	r24, 0x04	; 4
 3b4:	79 83       	std	Y+1, r23	; 0x01
 3b6:	aa df       	rcall	.-172    	; 0x30c <mfrc522_read>
    mfrc522_write(ComIrqReg,n&(~0x80));//clear all interrupt bits
 3b8:	68 2f       	mov	r22, r24
 3ba:	6f 77       	andi	r22, 0x7F	; 127
 3bc:	84 e0       	ldi	r24, 0x04	; 4
 3be:	94 df       	rcall	.-216    	; 0x2e8 <mfrc522_write>
    n=mfrc522_read(FIFOLevelReg);
 3c0:	8a e0       	ldi	r24, 0x0A	; 10
 3c2:	a4 df       	rcall	.-184    	; 0x30c <mfrc522_read>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
 3c4:	68 2f       	mov	r22, r24
 3c6:	60 68       	ori	r22, 0x80	; 128
 3c8:	8a e0       	ldi	r24, 0x0A	; 10
 3ca:	8e df       	rcall	.-228    	; 0x2e8 <mfrc522_write>
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???
 3cc:	60 e0       	ldi	r22, 0x00	; 0
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	8b df       	rcall	.-234    	; 0x2e8 <mfrc522_write>
 3d2:	2c 2c       	mov	r2, r12
 3d4:	79 81       	ldd	r23, Y+1	; 0x01
 3d6:	37 2e       	mov	r3, r23

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
 3d8:	81 2c       	mov	r8, r1
 3da:	91 2c       	mov	r9, r1
 3dc:	54 01       	movw	r10, r8
 3de:	51 2c       	mov	r5, r1
 3e0:	61 2c       	mov	r6, r1
 3e2:	71 2c       	mov	r7, r1
 3e4:	84 14       	cp	r8, r4
 3e6:	95 04       	cpc	r9, r5
 3e8:	a6 04       	cpc	r10, r6
 3ea:	b7 04       	cpc	r11, r7
 3ec:	58 f4       	brcc	.+22     	; 0x404 <__FUSE_REGION_LENGTH__+0x4>
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
 3ee:	f1 01       	movw	r30, r2
 3f0:	61 91       	ld	r22, Z+
 3f2:	1f 01       	movw	r2, r30
 3f4:	89 e0       	ldi	r24, 0x09	; 9
 3f6:	78 df       	rcall	.-272    	; 0x2e8 <mfrc522_write>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
 3f8:	ff ef       	ldi	r31, 0xFF	; 255
 3fa:	8f 1a       	sub	r8, r31
 3fc:	9f 0a       	sbc	r9, r31
 3fe:	af 0a       	sbc	r10, r31
 400:	bf 0a       	sbc	r11, r31
 402:	f0 cf       	rjmp	.-32     	; 0x3e4 <mfrc522_to_card+0x86>
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
	}

	//Execute the cmd
	mfrc522_write(CommandReg, cmd);
 404:	6d 2d       	mov	r22, r13
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	6f df       	rcall	.-290    	; 0x2e8 <mfrc522_write>
    if (cmd == Transceive_CMD)
 40a:	8c e0       	ldi	r24, 0x0C	; 12
 40c:	d8 12       	cpse	r13, r24
 40e:	06 c0       	rjmp	.+12     	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
    {    
		n=mfrc522_read(BitFramingReg);
 410:	8d e0       	ldi	r24, 0x0D	; 13
 412:	7c df       	rcall	.-264    	; 0x30c <mfrc522_read>
		mfrc522_write(BitFramingReg,n|0x80);  
 414:	68 2f       	mov	r22, r24
 416:	60 68       	ori	r22, 0x80	; 128
 418:	8d e0       	ldi	r24, 0x0D	; 13
 41a:	66 df       	rcall	.-308    	; 0x2e8 <mfrc522_write>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
 41c:	40 ed       	ldi	r20, 0xD0	; 208
 41e:	84 2e       	mov	r8, r20
 420:	47 e0       	ldi	r20, 0x07	; 7
 422:	94 2e       	mov	r9, r20
 424:	a1 2c       	mov	r10, r1
 426:	b1 2c       	mov	r11, r1
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = mfrc522_read(ComIrqReg);
        i--;
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 428:	01 60       	ori	r16, 0x01	; 1
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = mfrc522_read(ComIrqReg);
 42a:	84 e0       	ldi	r24, 0x04	; 4
 42c:	6f df       	rcall	.-290    	; 0x30c <mfrc522_read>
 42e:	c8 2e       	mov	r12, r24
        i--;
 430:	e1 e0       	ldi	r30, 0x01	; 1
 432:	8e 1a       	sub	r8, r30
 434:	91 08       	sbc	r9, r1
 436:	a1 08       	sbc	r10, r1
 438:	b1 08       	sbc	r11, r1
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 43a:	19 f0       	breq	.+6      	; 0x442 <__FUSE_REGION_LENGTH__+0x42>
 43c:	80 2f       	mov	r24, r16
 43e:	8c 21       	and	r24, r12
 440:	a1 f3       	breq	.-24     	; 0x42a <__FUSE_REGION_LENGTH__+0x2a>

	tmp=mfrc522_read(BitFramingReg);
 442:	8d e0       	ldi	r24, 0x0D	; 13
 444:	63 df       	rcall	.-314    	; 0x30c <mfrc522_read>
	mfrc522_write(BitFramingReg,tmp&(~0x80));
 446:	68 2f       	mov	r22, r24
 448:	6f 77       	andi	r22, 0x7F	; 127
 44a:	8d e0       	ldi	r24, 0x0D	; 13
 44c:	4d df       	rcall	.-358    	; 0x2e8 <mfrc522_write>
	
    if (i != 0)
 44e:	89 28       	or	r8, r9
 450:	8a 28       	or	r8, r10
 452:	8b 28       	or	r8, r11
 454:	11 f4       	brne	.+4      	; 0x45a <__FUSE_REGION_LENGTH__+0x5a>
	return status;
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
 456:	13 e0       	ldi	r17, 0x03	; 3
 458:	4e c0       	rjmp	.+156    	; 0x4f6 <__FUSE_REGION_LENGTH__+0xf6>
	tmp=mfrc522_read(BitFramingReg);
	mfrc522_write(BitFramingReg,tmp&(~0x80));
	
    if (i != 0)
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 45a:	86 e0       	ldi	r24, 0x06	; 6
 45c:	57 df       	rcall	.-338    	; 0x30c <mfrc522_read>
 45e:	8b 71       	andi	r24, 0x1B	; 27
 460:	d1 f7       	brne	.-12     	; 0x456 <__FUSE_REGION_LENGTH__+0x56>
        {
            status = CARD_FOUND;
            if (n & irqEn & 0x01)
 462:	11 70       	andi	r17, 0x01	; 1
 464:	1c 21       	and	r17, r12
 466:	11 f0       	breq	.+4      	; 0x46c <__FUSE_REGION_LENGTH__+0x6c>
            {   
				status = CARD_NOT_FOUND;			//??   
 468:	12 e0       	ldi	r17, 0x02	; 2
 46a:	01 c0       	rjmp	.+2      	; 0x46e <__FUSE_REGION_LENGTH__+0x6e>
	
    if (i != 0)
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
        {
            status = CARD_FOUND;
 46c:	11 e0       	ldi	r17, 0x01	; 1
            if (n & irqEn & 0x01)
            {   
				status = CARD_NOT_FOUND;			//??   
			}

            if (cmd == Transceive_CMD)
 46e:	fc e0       	ldi	r31, 0x0C	; 12
 470:	df 12       	cpse	r13, r31
 472:	41 c0       	rjmp	.+130    	; 0x4f6 <__FUSE_REGION_LENGTH__+0xf6>
            {
               	n = mfrc522_read(FIFOLevelReg);
 474:	8a e0       	ldi	r24, 0x0A	; 10
 476:	4a df       	rcall	.-364    	; 0x30c <mfrc522_read>
 478:	08 2f       	mov	r16, r24
              	lastBits = mfrc522_read(ControlReg) & 0x07;
 47a:	8c e0       	ldi	r24, 0x0C	; 12
 47c:	47 df       	rcall	.-370    	; 0x30c <mfrc522_read>
 47e:	28 2f       	mov	r18, r24
 480:	27 70       	andi	r18, 0x07	; 7
 482:	80 2f       	mov	r24, r16
 484:	90 e0       	ldi	r25, 0x00	; 0
                if (lastBits)
 486:	49 f0       	breq	.+18     	; 0x49a <__FUSE_REGION_LENGTH__+0x9a>
                {   
					*back_data_len = (n-1)*8 + lastBits;   
 488:	01 97       	sbiw	r24, 0x01	; 1
 48a:	33 e0       	ldi	r19, 0x03	; 3
 48c:	88 0f       	add	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	3a 95       	dec	r19
 492:	e1 f7       	brne	.-8      	; 0x48c <__FUSE_REGION_LENGTH__+0x8c>
 494:	82 0f       	add	r24, r18
 496:	91 1d       	adc	r25, r1
 498:	05 c0       	rjmp	.+10     	; 0x4a4 <__FUSE_REGION_LENGTH__+0xa4>
				}
                else
                {   
					*back_data_len = n*8;   
 49a:	23 e0       	ldi	r18, 0x03	; 3
 49c:	88 0f       	add	r24, r24
 49e:	99 1f       	adc	r25, r25
 4a0:	2a 95       	dec	r18
 4a2:	e1 f7       	brne	.-8      	; 0x49c <__FUSE_REGION_LENGTH__+0x9c>
 4a4:	09 2e       	mov	r0, r25
 4a6:	00 0c       	add	r0, r0
 4a8:	aa 0b       	sbc	r26, r26
 4aa:	bb 0b       	sbc	r27, r27
 4ac:	ea 81       	ldd	r30, Y+2	; 0x02
 4ae:	fb 81       	ldd	r31, Y+3	; 0x03
 4b0:	80 83       	st	Z, r24
 4b2:	91 83       	std	Z+1, r25	; 0x01
 4b4:	a2 83       	std	Z+2, r26	; 0x02
 4b6:	b3 83       	std	Z+3, r27	; 0x03
				}

                if (n == 0)
 4b8:	00 23       	and	r16, r16
 4ba:	21 f0       	breq	.+8      	; 0x4c4 <__FUSE_REGION_LENGTH__+0xc4>
                {   
					n = 1;    
				}
                if (n > MAX_LEN)
 4bc:	01 31       	cpi	r16, 0x11	; 17
 4be:	18 f0       	brcs	.+6      	; 0x4c6 <__FUSE_REGION_LENGTH__+0xc6>
                {   
					n = MAX_LEN;   
 4c0:	00 e1       	ldi	r16, 0x10	; 16
 4c2:	01 c0       	rjmp	.+2      	; 0x4c6 <__FUSE_REGION_LENGTH__+0xc6>
					*back_data_len = n*8;   
				}

                if (n == 0)
                {   
					n = 1;    
 4c4:	01 e0       	ldi	r16, 0x01	; 1
 4c6:	37 01       	movw	r6, r14
                {   
					n = MAX_LEN;   
				}
				
				//Reading the received data in FIFO
                for (i=0; i<n; i++)
 4c8:	81 2c       	mov	r8, r1
 4ca:	91 2c       	mov	r9, r1
 4cc:	54 01       	movw	r10, r8
 4ce:	c0 2e       	mov	r12, r16
 4d0:	d1 2c       	mov	r13, r1
 4d2:	e1 2c       	mov	r14, r1
 4d4:	f1 2c       	mov	r15, r1
 4d6:	8c 14       	cp	r8, r12
 4d8:	9d 04       	cpc	r9, r13
 4da:	ae 04       	cpc	r10, r14
 4dc:	bf 04       	cpc	r11, r15
 4de:	58 f4       	brcc	.+22     	; 0x4f6 <__FUSE_REGION_LENGTH__+0xf6>
                {   
					back_data[i] = mfrc522_read(FIFODataReg);    
 4e0:	89 e0       	ldi	r24, 0x09	; 9
 4e2:	14 df       	rcall	.-472    	; 0x30c <mfrc522_read>
 4e4:	f3 01       	movw	r30, r6
 4e6:	81 93       	st	Z+, r24
 4e8:	3f 01       	movw	r6, r30
                {   
					n = MAX_LEN;   
				}
				
				//Reading the received data in FIFO
                for (i=0; i<n; i++)
 4ea:	ff ef       	ldi	r31, 0xFF	; 255
 4ec:	8f 1a       	sub	r8, r31
 4ee:	9f 0a       	sbc	r9, r31
 4f0:	af 0a       	sbc	r10, r31
 4f2:	bf 0a       	sbc	r11, r31
 4f4:	f0 cf       	rjmp	.-32     	; 0x4d6 <__FUSE_REGION_LENGTH__+0xd6>
	
    //SetBitMask(ControlReg,0x80);           //timer stops
    //mfrc522_write(cmdReg, PCD_IDLE); 

    return status;
}
 4f6:	81 2f       	mov	r24, r17
 4f8:	0f 90       	pop	r0
 4fa:	0f 90       	pop	r0
 4fc:	0f 90       	pop	r0
 4fe:	df 91       	pop	r29
 500:	cf 91       	pop	r28
 502:	1f 91       	pop	r17
 504:	0f 91       	pop	r16
 506:	ff 90       	pop	r15
 508:	ef 90       	pop	r14
 50a:	df 90       	pop	r13
 50c:	cf 90       	pop	r12
 50e:	bf 90       	pop	r11
 510:	af 90       	pop	r10
 512:	9f 90       	pop	r9
 514:	8f 90       	pop	r8
 516:	7f 90       	pop	r7
 518:	6f 90       	pop	r6
 51a:	5f 90       	pop	r5
 51c:	4f 90       	pop	r4
 51e:	3f 90       	pop	r3
 520:	2f 90       	pop	r2
 522:	08 95       	ret

00000524 <mfrc522_request>:
{
	mfrc522_write(CommandReg,SoftReset_CMD);
}

uint8_t	mfrc522_request(uint8_t req_mode, uint8_t * tag_type)
{
 524:	ef 92       	push	r14
 526:	ff 92       	push	r15
 528:	0f 93       	push	r16
 52a:	1f 93       	push	r17
 52c:	cf 93       	push	r28
 52e:	df 93       	push	r29
 530:	00 d0       	rcall	.+0      	; 0x532 <mfrc522_request+0xe>
 532:	00 d0       	rcall	.+0      	; 0x534 <mfrc522_request+0x10>
 534:	cd b7       	in	r28, 0x3d	; 61
 536:	de b7       	in	r29, 0x3e	; 62
 538:	18 2f       	mov	r17, r24
 53a:	7b 01       	movw	r14, r22
	uint8_t  status;  
	uint32_t backBits;//The received data bits

	mfrc522_write(BitFramingReg, 0x07);//TxLastBists = BitFramingReg[2..0]	???
 53c:	67 e0       	ldi	r22, 0x07	; 7
 53e:	8d e0       	ldi	r24, 0x0D	; 13
 540:	d3 de       	rcall	.-602    	; 0x2e8 <mfrc522_write>
	
	tag_type[0] = req_mode;
 542:	f7 01       	movw	r30, r14
 544:	10 83       	st	Z, r17
	status = mfrc522_to_card(Transceive_CMD, tag_type, 1, tag_type, &backBits);
 546:	8e 01       	movw	r16, r28
 548:	0f 5f       	subi	r16, 0xFF	; 255
 54a:	1f 4f       	sbci	r17, 0xFF	; 255
 54c:	97 01       	movw	r18, r14
 54e:	41 e0       	ldi	r20, 0x01	; 1
 550:	b7 01       	movw	r22, r14
 552:	8c e0       	ldi	r24, 0x0C	; 12
 554:	04 df       	rcall	.-504    	; 0x35e <mfrc522_to_card>

	if ((status != CARD_FOUND) || (backBits != 0x10))
 556:	81 30       	cpi	r24, 0x01	; 1
 558:	49 f4       	brne	.+18     	; 0x56c <mfrc522_request+0x48>
 55a:	49 81       	ldd	r20, Y+1	; 0x01
 55c:	5a 81       	ldd	r21, Y+2	; 0x02
 55e:	6b 81       	ldd	r22, Y+3	; 0x03
 560:	7c 81       	ldd	r23, Y+4	; 0x04
 562:	40 31       	cpi	r20, 0x10	; 16
 564:	51 05       	cpc	r21, r1
 566:	61 05       	cpc	r22, r1
 568:	71 05       	cpc	r23, r1
 56a:	09 f0       	breq	.+2      	; 0x56e <mfrc522_request+0x4a>
	{    
		status = ERROR;
 56c:	83 e0       	ldi	r24, 0x03	; 3
	}
   
	return status;
}
 56e:	0f 90       	pop	r0
 570:	0f 90       	pop	r0
 572:	0f 90       	pop	r0
 574:	0f 90       	pop	r0
 576:	df 91       	pop	r29
 578:	cf 91       	pop	r28
 57a:	1f 91       	pop	r17
 57c:	0f 91       	pop	r16
 57e:	ff 90       	pop	r15
 580:	ef 90       	pop	r14
 582:	08 95       	ret

00000584 <mfrc522_get_card_serial>:
    return status;
}


uint8_t mfrc522_get_card_serial(uint8_t * serial_out)
{
 584:	ef 92       	push	r14
 586:	ff 92       	push	r15
 588:	0f 93       	push	r16
 58a:	1f 93       	push	r17
 58c:	cf 93       	push	r28
 58e:	df 93       	push	r29
 590:	00 d0       	rcall	.+0      	; 0x592 <mfrc522_get_card_serial+0xe>
 592:	00 d0       	rcall	.+0      	; 0x594 <mfrc522_get_card_serial+0x10>
 594:	cd b7       	in	r28, 0x3d	; 61
 596:	de b7       	in	r29, 0x3e	; 62
 598:	7c 01       	movw	r14, r24
	uint8_t status;
    uint8_t i;
	uint8_t serNumCheck=0;
    uint32_t unLen;
    
	mfrc522_write(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 59a:	60 e0       	ldi	r22, 0x00	; 0
 59c:	8d e0       	ldi	r24, 0x0D	; 13
 59e:	a4 de       	rcall	.-696    	; 0x2e8 <mfrc522_write>
 
    serial_out[0] = PICC_ANTICOLL;
 5a0:	83 e9       	ldi	r24, 0x93	; 147
 5a2:	f7 01       	movw	r30, r14
 5a4:	80 83       	st	Z, r24
    serial_out[1] = 0x20;
 5a6:	80 e2       	ldi	r24, 0x20	; 32
 5a8:	81 83       	std	Z+1, r24	; 0x01
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);
 5aa:	8e 01       	movw	r16, r28
 5ac:	0f 5f       	subi	r16, 0xFF	; 255
 5ae:	1f 4f       	sbci	r17, 0xFF	; 255
 5b0:	97 01       	movw	r18, r14
 5b2:	42 e0       	ldi	r20, 0x02	; 2
 5b4:	b7 01       	movw	r22, r14
 5b6:	8c e0       	ldi	r24, 0x0C	; 12
 5b8:	d2 de       	rcall	.-604    	; 0x35e <mfrc522_to_card>

    if (status == CARD_FOUND)
 5ba:	81 30       	cpi	r24, 0x01	; 1
 5bc:	71 f4       	brne	.+28     	; 0x5da <mfrc522_get_card_serial+0x56>
 5be:	f7 01       	movw	r30, r14
 5c0:	97 01       	movw	r18, r14
 5c2:	2c 5f       	subi	r18, 0xFC	; 252
 5c4:	3f 4f       	sbci	r19, 0xFF	; 255
 5c6:	90 e0       	ldi	r25, 0x00	; 0
	{
		//Check card serial number
		for (i=0; i<4; i++)
		{   
		 	serNumCheck ^= serial_out[i];
 5c8:	41 91       	ld	r20, Z+
 5ca:	94 27       	eor	r25, r20
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);

    if (status == CARD_FOUND)
	{
		//Check card serial number
		for (i=0; i<4; i++)
 5cc:	e2 17       	cp	r30, r18
 5ce:	f3 07       	cpc	r31, r19
 5d0:	d9 f7       	brne	.-10     	; 0x5c8 <mfrc522_get_card_serial+0x44>
		{   
		 	serNumCheck ^= serial_out[i];
		}
		if (serNumCheck != serial_out[i])
 5d2:	f7 01       	movw	r30, r14
 5d4:	24 81       	ldd	r18, Z+4	; 0x04
 5d6:	92 13       	cpse	r25, r18
		{   
			status = ERROR;    
 5d8:	83 e0       	ldi	r24, 0x03	; 3
		}
    }
    return status;
}
 5da:	0f 90       	pop	r0
 5dc:	0f 90       	pop	r0
 5de:	0f 90       	pop	r0
 5e0:	0f 90       	pop	r0
 5e2:	df 91       	pop	r29
 5e4:	cf 91       	pop	r28
 5e6:	1f 91       	pop	r17
 5e8:	0f 91       	pop	r16
 5ea:	ff 90       	pop	r15
 5ec:	ef 90       	pop	r14
 5ee:	08 95       	ret

000005f0 <spi_init>:
#include <spi.h>

#if SPI_CONFIG_AS_MASTER
void spi_init()
{
	SPI_DDR |= (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS);
 5f0:	84 b1       	in	r24, 0x04	; 4
 5f2:	8c 62       	ori	r24, 0x2C	; 44
 5f4:	84 b9       	out	0x04, r24	; 4
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);//prescaler 16
 5f6:	8c b5       	in	r24, 0x2c	; 44
 5f8:	81 65       	ori	r24, 0x51	; 81
 5fa:	8c bd       	out	0x2c, r24	; 44
 5fc:	08 95       	ret

000005fe <spi_transmit>:
}


uint8_t spi_transmit(uint8_t data)
{
	SPDR = data;
 5fe:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
 600:	0d b4       	in	r0, 0x2d	; 45
 602:	07 fe       	sbrs	r0, 7
 604:	fd cf       	rjmp	.-6      	; 0x600 <spi_transmit+0x2>
	
	return SPDR;
 606:	8e b5       	in	r24, 0x2e	; 46
}
 608:	08 95       	ret

0000060a <main>:
#define WHITE 	3

void gate_action();

int main()
{
 60a:	cf 93       	push	r28
 60c:	df 93       	push	r29
 60e:	cd b7       	in	r28, 0x3d	; 61
 610:	de b7       	in	r29, 0x3e	; 62
 612:	6a 97       	sbiw	r28, 0x1a	; 26
 614:	0f b6       	in	r0, 0x3f	; 63
 616:	f8 94       	cli
 618:	de bf       	out	0x3e, r29	; 62
 61a:	0f be       	out	0x3f, r0	; 63
 61c:	cd bf       	out	0x3d, r28	; 61
	uint8_t byte;
	uint8_t str[MAX_LEN];
	uint8_t person_recognised = 0;
	uint8_t Blue[5]  ={0x3d,0x21,0xe4,0xd3,0x2b};
 61e:	85 e0       	ldi	r24, 0x05	; 5
 620:	e0 e0       	ldi	r30, 0x00	; 0
 622:	f1 e0       	ldi	r31, 0x01	; 1
 624:	de 01       	movw	r26, r28
 626:	56 96       	adiw	r26, 0x16	; 22
 628:	01 90       	ld	r0, Z+
 62a:	0d 92       	st	X+, r0
 62c:	8a 95       	dec	r24
 62e:	e1 f7       	brne	.-8      	; 0x628 <main+0x1e>
	uint8_t White[5] ={0x0e,0x65,0xe2,0x13,0x9a};
 630:	85 e0       	ldi	r24, 0x05	; 5
 632:	e5 e0       	ldi	r30, 0x05	; 5
 634:	f1 e0       	ldi	r31, 0x01	; 1
 636:	de 01       	movw	r26, r28
 638:	51 96       	adiw	r26, 0x11	; 17
 63a:	01 90       	ld	r0, Z+
 63c:	0d 92       	st	X+, r0
 63e:	8a 95       	dec	r24
 640:	e1 f7       	brne	.-8      	; 0x63a <main+0x30>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 642:	2f e7       	ldi	r18, 0x7F	; 127
 644:	88 e3       	ldi	r24, 0x38	; 56
 646:	91 e0       	ldi	r25, 0x01	; 1
 648:	21 50       	subi	r18, 0x01	; 1
 64a:	80 40       	sbci	r24, 0x00	; 0
 64c:	90 40       	sbci	r25, 0x00	; 0
 64e:	e1 f7       	brne	.-8      	; 0x648 <main+0x3e>
 650:	00 c0       	rjmp	.+0      	; 0x652 <main+0x48>
 652:	00 00       	nop
	
	_delay_ms(50);
	LCDInit(LS_BLINK);
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	7e dd       	rcall	.-1284   	; 0x154 <LCDInit>
	LCDWriteStringXY(2,0,"RFID Reader");
 658:	60 e0       	ldi	r22, 0x00	; 0
 65a:	82 e0       	ldi	r24, 0x02	; 2
 65c:	1b de       	rcall	.-970    	; 0x294 <LCDGotoXY>
 65e:	8c e2       	ldi	r24, 0x2C	; 44
 660:	91 e0       	ldi	r25, 0x01	; 1
 662:	ab dd       	rcall	.-1194   	; 0x1ba <LCDWriteString>
	LCDWriteStringXY(5,1,VERSION_STR);
 664:	61 e0       	ldi	r22, 0x01	; 1
 666:	85 e0       	ldi	r24, 0x05	; 5
 668:	15 de       	rcall	.-982    	; 0x294 <LCDGotoXY>
 66a:	88 e3       	ldi	r24, 0x38	; 56
 66c:	91 e0       	ldi	r25, 0x01	; 1
 66e:	a5 dd       	rcall	.-1206   	; 0x1ba <LCDWriteString>
	
	
	MOTOR_PORT_INIT();
 670:	80 e3       	ldi	r24, 0x30	; 48
 672:	87 b9       	out	0x07, r24	; 7
	spi_init();
 674:	bd df       	rcall	.-134    	; 0x5f0 <spi_init>
	mfrc522_init();
 676:	56 de       	rcall	.-852    	; 0x324 <mfrc522_init>
 678:	af ef       	ldi	r26, 0xFF	; 255
 67a:	be e9       	ldi	r27, 0x9E	; 158
 67c:	24 e2       	ldi	r18, 0x24	; 36
 67e:	a1 50       	subi	r26, 0x01	; 1
 680:	b0 40       	sbci	r27, 0x00	; 0
 682:	20 40       	sbci	r18, 0x00	; 0
 684:	e1 f7       	brne	.-8      	; 0x67e <main+0x74>
 686:	00 c0       	rjmp	.+0      	; 0x688 <main+0x7e>
 688:	00 00       	nop
	_delay_ms(1500);
	LCDClear();
 68a:	60 e0       	ldi	r22, 0x00	; 0
 68c:	81 e0       	ldi	r24, 0x01	; 1
 68e:	3a dd       	rcall	.-1420   	; 0x104 <LCDByte>
	
	//init reader
	
	
	//check version of the reader
	byte = mfrc522_read(VersionReg);
 690:	87 e3       	ldi	r24, 0x37	; 55
 692:	3c de       	rcall	.-904    	; 0x30c <mfrc522_read>
	if(byte == 0x92)
 694:	82 39       	cpi	r24, 0x92	; 146
 696:	31 f4       	brne	.+12     	; 0x6a4 <main+0x9a>
	{
		LCDWriteStringXY(2,0,"MIFARE RC522v2");
 698:	60 e0       	ldi	r22, 0x00	; 0
 69a:	82 e0       	ldi	r24, 0x02	; 2
 69c:	fb dd       	rcall	.-1034   	; 0x294 <LCDGotoXY>
 69e:	8e e3       	ldi	r24, 0x3E	; 62
 6a0:	91 e0       	ldi	r25, 0x01	; 1
 6a2:	08 c0       	rjmp	.+16     	; 0x6b4 <main+0xaa>
		LCDWriteStringXY(4,1,"Detected");
	}else if(byte == 0x91 || byte==0x90)
 6a4:	80 59       	subi	r24, 0x90	; 144
	{
		LCDWriteStringXY(2,0,"MIFARE RC522v1");
 6a6:	60 e0       	ldi	r22, 0x00	; 0
	byte = mfrc522_read(VersionReg);
	if(byte == 0x92)
	{
		LCDWriteStringXY(2,0,"MIFARE RC522v2");
		LCDWriteStringXY(4,1,"Detected");
	}else if(byte == 0x91 || byte==0x90)
 6a8:	82 30       	cpi	r24, 0x02	; 2
 6aa:	58 f4       	brcc	.+22     	; 0x6c2 <main+0xb8>
	{
		LCDWriteStringXY(2,0,"MIFARE RC522v1");
 6ac:	82 e0       	ldi	r24, 0x02	; 2
 6ae:	f2 dd       	rcall	.-1052   	; 0x294 <LCDGotoXY>
 6b0:	86 e5       	ldi	r24, 0x56	; 86
 6b2:	91 e0       	ldi	r25, 0x01	; 1
 6b4:	82 dd       	rcall	.-1276   	; 0x1ba <LCDWriteString>
		LCDWriteStringXY(4,1,"Detected");
 6b6:	61 e0       	ldi	r22, 0x01	; 1
 6b8:	84 e0       	ldi	r24, 0x04	; 4
 6ba:	ec dd       	rcall	.-1064   	; 0x294 <LCDGotoXY>
 6bc:	8d e4       	ldi	r24, 0x4D	; 77
 6be:	91 e0       	ldi	r25, 0x01	; 1
 6c0:	04 c0       	rjmp	.+8      	; 0x6ca <main+0xc0>
	}else
	{
		LCDWriteStringXY(0,0,"No reader found");
 6c2:	80 e0       	ldi	r24, 0x00	; 0
 6c4:	e7 dd       	rcall	.-1074   	; 0x294 <LCDGotoXY>
 6c6:	85 e6       	ldi	r24, 0x65	; 101
 6c8:	91 e0       	ldi	r25, 0x01	; 1
 6ca:	77 dd       	rcall	.-1298   	; 0x1ba <LCDWriteString>
 6cc:	8f ef       	ldi	r24, 0xFF	; 255
 6ce:	9e e9       	ldi	r25, 0x9E	; 158
 6d0:	a4 e2       	ldi	r26, 0x24	; 36
 6d2:	81 50       	subi	r24, 0x01	; 1
 6d4:	90 40       	sbci	r25, 0x00	; 0
 6d6:	a0 40       	sbci	r26, 0x00	; 0
 6d8:	e1 f7       	brne	.-8      	; 0x6d2 <main+0xc8>
 6da:	00 c0       	rjmp	.+0      	; 0x6dc <main+0xd2>
 6dc:	00 00       	nop
	}
	
	_delay_ms(1500);
	LCDClear();
 6de:	60 e0       	ldi	r22, 0x00	; 0
 6e0:	81 e0       	ldi	r24, 0x01	; 1
 6e2:	10 dd       	rcall	.-1504   	; 0x104 <LCDByte>
 6e4:	8e 01       	movw	r16, r28
 6e6:	05 5e       	subi	r16, 0xE5	; 229
 6e8:	1f 4f       	sbci	r17, 0xFF	; 255
	
	while(1){
		LCDClear();
 6ea:	60 e0       	ldi	r22, 0x00	; 0
 6ec:	81 e0       	ldi	r24, 0x01	; 1
 6ee:	0a dd       	rcall	.-1516   	; 0x104 <LCDByte>
		LCDWriteStringXY(1,0,"Show Your Card");
 6f0:	60 e0       	ldi	r22, 0x00	; 0
 6f2:	81 e0       	ldi	r24, 0x01	; 1
 6f4:	cf dd       	rcall	.-1122   	; 0x294 <LCDGotoXY>
 6f6:	85 e7       	ldi	r24, 0x75	; 117
 6f8:	91 e0       	ldi	r25, 0x01	; 1
 6fa:	5f dd       	rcall	.-1346   	; 0x1ba <LCDWriteString>
		byte = mfrc522_request(PICC_REQALL,str);
 6fc:	be 01       	movw	r22, r28
 6fe:	6f 5f       	subi	r22, 0xFF	; 255
 700:	7f 4f       	sbci	r23, 0xFF	; 255
 702:	82 e5       	ldi	r24, 0x52	; 82
 704:	0f df       	rcall	.-482    	; 0x524 <mfrc522_request>
		
		if(byte == CARD_FOUND)
 706:	81 30       	cpi	r24, 0x01	; 1
 708:	81 f7       	brne	.-32     	; 0x6ea <main+0xe0>
		{
			byte = mfrc522_get_card_serial(str);
 70a:	ce 01       	movw	r24, r28
 70c:	01 96       	adiw	r24, 0x01	; 1
 70e:	3a df       	rcall	.-396    	; 0x584 <mfrc522_get_card_serial>
			if(byte == CARD_FOUND)
 710:	81 30       	cpi	r24, 0x01	; 1
 712:	69 f5       	brne	.+90     	; 0x76e <main+0x164>
 714:	fe 01       	movw	r30, r28
 716:	76 96       	adiw	r30, 0x16	; 22
 718:	be 01       	movw	r22, r28
 71a:	6f 5f       	subi	r22, 0xFF	; 255
 71c:	7f 4f       	sbci	r23, 0xFF	; 255
 71e:	cb 01       	movw	r24, r22
 720:	9f 01       	movw	r18, r30
			{
				person_recognised = 1;
				for(byte=0;byte<5;byte++)
				{
					if(Blue[byte] != str[byte])
 722:	51 91       	ld	r21, Z+
 724:	dc 01       	movw	r26, r24
 726:	4d 91       	ld	r20, X+
 728:	cd 01       	movw	r24, r26
 72a:	54 13       	cpse	r21, r20
 72c:	0c c0       	rjmp	.+24     	; 0x746 <main+0x13c>
		{
			byte = mfrc522_get_card_serial(str);
			if(byte == CARD_FOUND)
			{
				person_recognised = 1;
				for(byte=0;byte<5;byte++)
 72e:	e0 17       	cp	r30, r16
 730:	f1 07       	cpc	r31, r17
 732:	b9 f7       	brne	.-18     	; 0x722 <main+0x118>
				}
				switch(person_recognised)
				{
					case BLUE : 
					{
						LCDClear();
 734:	60 e0       	ldi	r22, 0x00	; 0
 736:	81 e0       	ldi	r24, 0x01	; 1
 738:	e5 dc       	rcall	.-1590   	; 0x104 <LCDByte>
						LCDWriteStringXY(3,0,"Hello Blue");						
 73a:	60 e0       	ldi	r22, 0x00	; 0
 73c:	83 e0       	ldi	r24, 0x03	; 3
 73e:	aa dd       	rcall	.-1196   	; 0x294 <LCDGotoXY>
 740:	8a e8       	ldi	r24, 0x8A	; 138
 742:	91 e0       	ldi	r25, 0x01	; 1
 744:	1d c0       	rjmp	.+58     	; 0x780 <main+0x176>
 746:	fe 01       	movw	r30, r28
 748:	71 96       	adiw	r30, 0x11	; 17
					person_recognised = BLUE;
				else
				{
					for(byte=0;byte<5;byte++)
					{
						if(White[byte] != str[byte])
 74a:	91 91       	ld	r25, Z+
 74c:	db 01       	movw	r26, r22
 74e:	8d 91       	ld	r24, X+
 750:	bd 01       	movw	r22, r26
 752:	98 13       	cpse	r25, r24
 754:	18 c0       	rjmp	.+48     	; 0x786 <main+0x17c>
				}
				if(byte == 5)
					person_recognised = BLUE;
				else
				{
					for(byte=0;byte<5;byte++)
 756:	e2 17       	cp	r30, r18
 758:	f3 07       	cpc	r31, r19
 75a:	b9 f7       	brne	.-18     	; 0x74a <main+0x140>
						gate_action();
						break;
					}
					case WHITE : 
					{
						LCDClear();
 75c:	60 e0       	ldi	r22, 0x00	; 0
 75e:	81 e0       	ldi	r24, 0x01	; 1
 760:	d1 dc       	rcall	.-1630   	; 0x104 <LCDByte>
						LCDWriteStringXY(3,0,"Hello White");
 762:	60 e0       	ldi	r22, 0x00	; 0
 764:	83 e0       	ldi	r24, 0x03	; 3
 766:	96 dd       	rcall	.-1236   	; 0x294 <LCDGotoXY>
 768:	85 e9       	ldi	r24, 0x95	; 149
 76a:	91 e0       	ldi	r25, 0x01	; 1
 76c:	09 c0       	rjmp	.+18     	; 0x780 <main+0x176>
					}
				}
			}
			else
			{
				LCDClear();
 76e:	60 e0       	ldi	r22, 0x00	; 0
 770:	81 e0       	ldi	r24, 0x01	; 1
 772:	c8 dc       	rcall	.-1648   	; 0x104 <LCDByte>
				LCDWriteStringXY(5,0,"Error");
 774:	60 e0       	ldi	r22, 0x00	; 0
 776:	85 e0       	ldi	r24, 0x05	; 5
 778:	8d dd       	rcall	.-1254   	; 0x294 <LCDGotoXY>
 77a:	84 e8       	ldi	r24, 0x84	; 132
 77c:	91 e0       	ldi	r25, 0x01	; 1
 77e:	0b c0       	rjmp	.+22     	; 0x796 <main+0x18c>
						break;
					}
					case WHITE : 
					{
						LCDClear();
						LCDWriteStringXY(3,0,"Hello White");
 780:	1c dd       	rcall	.-1480   	; 0x1ba <LCDWriteString>
						gate_action();
 782:	6c dc       	rcall	.-1832   	; 0x5c <gate_action>
						break;
 784:	b2 cf       	rjmp	.-156    	; 0x6ea <main+0xe0>
					}
					default :
					{
						LCDClear();
 786:	60 e0       	ldi	r22, 0x00	; 0
 788:	81 e0       	ldi	r24, 0x01	; 1
 78a:	bc dc       	rcall	.-1672   	; 0x104 <LCDByte>
						LCDWriteStringXY(0,0,"Not Recognised !");
 78c:	60 e0       	ldi	r22, 0x00	; 0
 78e:	80 e0       	ldi	r24, 0x00	; 0
 790:	81 dd       	rcall	.-1278   	; 0x294 <LCDGotoXY>
 792:	81 ea       	ldi	r24, 0xA1	; 161
 794:	91 e0       	ldi	r25, 0x01	; 1
 796:	11 dd       	rcall	.-1502   	; 0x1ba <LCDWriteString>
						break;
 798:	a8 cf       	rjmp	.-176    	; 0x6ea <main+0xe0>

0000079a <__divmodhi4>:
 79a:	97 fb       	bst	r25, 7
 79c:	07 2e       	mov	r0, r23
 79e:	16 f4       	brtc	.+4      	; 0x7a4 <__divmodhi4+0xa>
 7a0:	00 94       	com	r0
 7a2:	06 d0       	rcall	.+12     	; 0x7b0 <__divmodhi4_neg1>
 7a4:	77 fd       	sbrc	r23, 7
 7a6:	08 d0       	rcall	.+16     	; 0x7b8 <__divmodhi4_neg2>
 7a8:	0b d0       	rcall	.+22     	; 0x7c0 <__udivmodhi4>
 7aa:	07 fc       	sbrc	r0, 7
 7ac:	05 d0       	rcall	.+10     	; 0x7b8 <__divmodhi4_neg2>
 7ae:	3e f4       	brtc	.+14     	; 0x7be <__divmodhi4_exit>

000007b0 <__divmodhi4_neg1>:
 7b0:	90 95       	com	r25
 7b2:	81 95       	neg	r24
 7b4:	9f 4f       	sbci	r25, 0xFF	; 255
 7b6:	08 95       	ret

000007b8 <__divmodhi4_neg2>:
 7b8:	70 95       	com	r23
 7ba:	61 95       	neg	r22
 7bc:	7f 4f       	sbci	r23, 0xFF	; 255

000007be <__divmodhi4_exit>:
 7be:	08 95       	ret

000007c0 <__udivmodhi4>:
 7c0:	aa 1b       	sub	r26, r26
 7c2:	bb 1b       	sub	r27, r27
 7c4:	51 e1       	ldi	r21, 0x11	; 17
 7c6:	07 c0       	rjmp	.+14     	; 0x7d6 <__udivmodhi4_ep>

000007c8 <__udivmodhi4_loop>:
 7c8:	aa 1f       	adc	r26, r26
 7ca:	bb 1f       	adc	r27, r27
 7cc:	a6 17       	cp	r26, r22
 7ce:	b7 07       	cpc	r27, r23
 7d0:	10 f0       	brcs	.+4      	; 0x7d6 <__udivmodhi4_ep>
 7d2:	a6 1b       	sub	r26, r22
 7d4:	b7 0b       	sbc	r27, r23

000007d6 <__udivmodhi4_ep>:
 7d6:	88 1f       	adc	r24, r24
 7d8:	99 1f       	adc	r25, r25
 7da:	5a 95       	dec	r21
 7dc:	a9 f7       	brne	.-22     	; 0x7c8 <__udivmodhi4_loop>
 7de:	80 95       	com	r24
 7e0:	90 95       	com	r25
 7e2:	bc 01       	movw	r22, r24
 7e4:	cd 01       	movw	r24, r26
 7e6:	08 95       	ret

000007e8 <_exit>:
 7e8:	f8 94       	cli

000007ea <__stop_program>:
 7ea:	ff cf       	rjmp	.-2      	; 0x7ea <__stop_program>
